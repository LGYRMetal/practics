                            Filter 基础                             
    Filter 是 Servlet 规范的三大组件之一。顾名思义，就是过滤。可以在请求到达
目标资源之前先对请求进行拦截过滤，即对请求进行一些处理；也可以在响应到达客户
端之前先对响应进行拦截过滤，即对响应进行一些处理。

1.1 Filter 的生命周期
    Filter 的生命周期与Servlet的生命周期类似，其主要生命周期阶段有四个:
Filter对象的创建、Filter对象的初始化、Filter执行 doFilter() 方法，及最终
Filter对象被销毁。
    Filter的整个生命周期过程的执行，均由Web服务器负责管理。即Filter从创建到
销毁的整个过程中方法的调用，都是由Web服务器负责调用执行，程序员无法控制其执
行流程。

<!-- 注册Filter -->
<filter>
    <filter-name>Some-Filter</filter-name>
    <filter-class>com.abc.filters.SomeFilter</filter-class>
</filter>
<filter-mapping>
    <filter-name>Some-Filter</filter-name>
    <url-pattern>/*</url-pattern>
</filter-mapping>

chain.doFilter(request, response); // 将请求放行到下一个资源

1.1.2 Filter的特征
    1) Filter是在应用启动(被加载)时被创建和初始化的，这是与Servlet不同的
地方。Servlet是在该Servlet被第一次访问时创建的。Filter与Servlet的共同点是,
其无参构造器与init()方法只会执行一次。
    2) Filter是单例多线程的
    3) Filter是在应用停止的时候执行destroy()方法，Filter被销毁，即destroy()
方法只会执行一次。
    4) doFilter() 方法是无论哪个线程访问，只要由该Filter进行过滤，那么
就会执行该Filter的doFilter() 方法，即doFilter()方法是可以被多次执行的。
    5) 由于Filter是单例多线程的，所以为了保证其线程安全，一般情况下是不为
Filter类定义"可修改"的成员变量的。因为每个线程均可修改这个成员变量，会出现
线程安全问题。

1.2 FilterConfig
    指的是Filter在web.xml中的注册信息，tomcat将注册信息封装称一个
FilterConfig对象，在Filter初始化的时候，作为init(FilterConfig filterConfig)
方法的参数传递给init()方法。

1.3 FilterMapping
1.3.1 url-pattern
    若Filter为全路径匹配方式，那么url-pattern只能写为 /*，而不能写为 /。

    filter-mapping可以不适用url-pattern，但需要指定servlet-name，即当前
过滤器拦截的是对指定sevlet的请求

1.3.2 dispatcher标签的四个取值,如果不写，默认的是REQUEST
    1) FORWARD: 若请求是由一个Servlet通过RequestDispatcher的forword()方法
                所转发的，那么这个请求将被<dispatcher/>值为FORWORD的Filter
                拦截。即当前Filter只会拦截由RequestDispatcher的forword()
                方法所转发的请求。其它请求均不拦截。
    2) INCLUDE: 当前 Filter 只会拦截由 RequestDispatcher 的 include()方法
                所转发的请求。其它请求均不拦截。
    3) ERROR: 表示当跳转到指定的错误处理页面时，这个跳转请求会被当前过滤器
                拦截
    4) REQUEST: 表示当前过滤器会拦截普通请求，但是对于forword()与include()
                的跳转不进行拦截。默认值

注意:
PrintWriter out = response.getWriter(); 这个out(标准输出流)，一般不要
关，因为如果关了以后，filter中就无法再向其中写入数据，即使，获取了out，一般
当请求和相应结束后，tomcat会自动将其关闭，所以最好不要手动关闭

1.4 多个filter的执行顺序
    当应用中存在多个filter时，其执行顺序与其注册顺序一致

1.5 filter的执行原理
1.5.1 回顾Servlet的执行原理：
    两个Map:
    Web容器中存在两个Map，这两个Map的key均为Servlet注册时的<url-pattern/>
值，但其value是不同的。
    第一个Map的value是Servlet实例对象的应用，第二个Map的value为
<servlet-class/>的值，即servlet类的全限定类名。
    执行原理:
    当对Servlet的请求到达Servlet容器时，会先对请求进行解析，使用解析出的
URI，作为比较对象，从第一个Map中查找是否有匹配的key。若存在匹配的key，那么
读取其value，即servlet对象的引用，执行servlet的service()方法(不再向后查找
了)。若不存在匹配的key，那么再从第二个Map中查找是否有匹配的key。若存在，
则读取其value，即要访问的servlet全限定类名。然后使用反射机制创建该servlet
实例，并将该实例写入到第一个Map中，然后再执行Servlet的service()方法。
若第二个Map也没有找到同名的key，那么跳转到系统错误处理页面404。

1.5.2 filter的执行原理
    一个数组与一个Map：
    一个Map：Map的key为<url-pattern/>的值，value为filter实例对象的引用
    一个数组：存放着与请求相匹配的所有filter
    执行原理：
    当对某资源的请求到达web容器时，会先对请求进行解析，使用解析出的uri作为
比较对象，从map中查找是否存在匹配的key。若存在，那么读取其value，即filter
对象的引用，将该引用存放到数组中。然后，继续向后查找，直到将该Map查找完毕。
这样在数组中就会存在按照查找顺序排好序的filter引用(web.xml中注册顺序)。
数组参数完毕后，开始按照数组元素顺序进行执行。所有数组中filter全部执行完毕
后，再跳转到请求的目标资源

2.1 filter应用举例:
    2.1.1 装饰者设计模式
        Decorator Pattern 能过在不修改目标类也不适用继承的情况下，动态地扩展
    一个类的功能。它时通过创建一个包装对象，也就是装饰者来达到增强目标类
    的目的。
        装饰者设计模式的实现有两个要求:
        1）装饰者类与目标类要实现相同的接口，或继承自相同的抽象类。
        2）装饰者类中要有目标类的引用作为成员变量，而具体的赋值一般通过
           带参构造器完成。
        这两个要求的目的是，在装饰者类中的方法可以调用目标类的方法，以增强
    这个方法。而增强的这个方法是通过重写的方式进行的增强，所以要求实现相同
    的接口或继承相同的抽象类。
        在装饰者设计模式中，装饰者类一般是不对目标类进行增强的。装饰者类
    作为一个基类(仅仅调用目标类的目标方法，但不对其进行任何增强)，具体的装
    饰者继承自这个基类，对目标类进行具体的、单功能的增强。这样做的好处是，
    在很多方便的情况下可以实现多重地、组合式地增强。
        装饰者基类的要求:
        要求1: 必须要有无参构造器
        要求2：不对目标类的目标方法进行任何的增强

        具体装饰者类的要求：
        要求1：要继承自装饰者基类
        要求2：要有带参构造器
        要求3：具体装饰者类只对装饰者基类业务方法进行单一功能的增强

    2.1.2 静态代理设计模式
        静态代理类与装饰者类的共同点：
        1. 都要实现与目标类相同的业务接口
        2. 都要声明目标对象作为成员变量
        3. 都可以在不修改目标类的前提下增强目标方法

        区别:
        1. 使用目的不同：
            装饰者的使用目的是：增强目标对象
            静态代理的使用目的是：为了保护和隐藏目标对象
        2. 对于目标对象的获取方式不同：
            装饰者类中目标对象的获取：通过带参构造器传入
            静态代理类中目标对象的获取：在无参构造器中直接创建
        3. 功能增强的实现者不同：
            装饰者设计模式中存在装饰者基类，其并不真正实现增强，而是由具体
            的装饰者进行功能增强的，所以存在一个“装饰者链”的概念
            静态代理设计模式一般不存在父子类的关系，具体的增强，就是由
            代理类完成，无需其子类完成，所以不存在“链”的概念

Filter的应用:
1. POST提交方式中文乱码问题的解决
public class MyCharactorEncodingFilter implements Filter {
    @Override
    public void init(FilterConfig filterConfig) throws ServletException {
    }
    
    @Override
    public void destroy() {
    }

    public void doFilter(ServletRequest request,
                         ServletResponse response,
                         FilterChain chain) 
        throws IOException, ServletException {
        // 解决请求参数中文乱码问题
        request.setCharacterEncoding("UTF-8");

        // 解决响应中文乱码问题，必须写在chain.doFilter(request, response);
        // 之前，因为执行完chain.doFilter(request,response) 方法后就会开启
        // 标准输出流，设置ContextType应该在开启表中输出流之前
        response.setContentType("text/html;charset=UTF-8");

        chain.doFilter(request, response);
    }
}

2. GET提交方式中文乱码问题的解决
    2.1 使用GET提交时，若请求中携带有中文，为什么会产生乱码？    
        当用户提交了一个包含中文请求参数的请求时，浏览器首先会将这些中文
        转化为一个字节序列，发送到服务器。服务器接收到这个字节序列会按照其
        默认的字符编码(ISO8859-1)对其进行解码，此时就产生了乱码。但紧接着
        服务器会将解码过的参数存放到parameterMap中，那么这个Map中的参数
        已经是乱码了。
    看过滤器视频19

3. 访问权限过滤器
 视频20
