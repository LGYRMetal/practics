2.1 Servlet规范中的监听器
    Servlet规范中已经定义好了八个监听器接口，他们要监听的对象分别是
request、session、servletContext对象，触发监听器的事件是这三个对象的创建与销毁，他们的域属性空间中属性的添加、删除、修改，及session的钝化与活化操作。
    在JavaWeb项目中使用监听器，需要在web.xml文件中对监听器进行注册。例:
<!-- 注册监听器 -->
<listener>
    <listener-class>com.abc.listener.MyRequestListener</listener-class>
</listener>

2.1.1 ServletRequestListener
    该监听器用于完成对 Request 对象的创建及销毁的监听，即当 Reauest 对象被
创建或被销毁时，会触发该监听器中相应方法的执行。

2.1.2 ServletRequestAttributeListener
    该监听器用于完成对 request 域属性空间中属性的添加、修改、删除操作的监听

2.1.3 HttpSessionListener
    该监听器用于完成对Session对象的创建及销毁的监听

2.1.4 HttpSessionAttributeListener
    该监听器用于完成对 session 域属性空间中属性的添加、修改、删除操作的监听

2.1.5 ServletContextListener
    该监听器用于完成对 ServletContext 对象的创建及销毁的监听。不过需要注意，
由于 ServletContext 在一个应用中只有一个，且是在服务器启动时创建。另外，
ServletContext 的生命周期与整个应用相同，所以当项目重新部署，或Tomcat正常
关闭(通过 stop service 关闭，不能时terminate关闭)时可以销毁 ServletContext。

2.1.6 ServletContextAttributeListener
    该监听器用于完成对 Servlet Context 域属性空间中属性的添加、修改、删除操 
作的监听

2.1.7 HttpSessionBindingListener
    该监听器用于监听指定类型对象与 Session 的绑定与解绑，即该类型对象被放入
到 Session 域中，或从 Session 域中删除该类型对象，均会引发该监听器中相应
方法的执行。
    它与HttpSessionAttributeListener的不同之处是，该监听器监听的是指定类型的
对象在 Session 域中的操作，而 HttpSessionAttributeListener监听的是 Session
域属性空间的变化，无论是什么类型的对象。
    另外，需要强调两点：
    该监听器是由实体类实现
    该监听器无需在web.xml中注册
    简单的说:
    即，需要与Session绑定/解绑的实体类必须实现此接口，当该实体类对象
被绑定到Session时（放入到Session域中）会触发该监听器的
valueBound(HttpSessionBindingEvent event)方法；当该实体类对象与Session解绑时
（从Session域中删除）会触发该监听器的
valueUnbound(HttpSessionBindingEvent event)方法。该监听器不需要注册

2.1.8 HttpSessionSctivationListener
    该监听器用于监听在 Session 中存放的指定类型对象的钝化与活化。
    钝化是指将内存中的数据写入到硬盘中，而活化是指将硬盘中的数据恢复到内存。
当用户正在访问的应用或该应用所在的服务器由于种种原因被停掉，然后在短时间内
又重启，此时用户在访问时 Session 中的数据是不能丢掉的，在应用关闭之前，需要
将数据写入到硬盘，在重启后应可以立即重新恢复Session中的数据。这就称为
Session的钝化与活化。
    那么 Session 中的哪些数据能够钝化呢？只有存放在JVM堆内存中的实现了
Serializable类的对象能够被钝化。也就是说，对于字符串常量、基本数据类型的常量
等存放在JVM方法区中常量池中的常量，是无法被钝化的。
    对于监听 Session 中对象数据的钝化与活化，需要注意以下几点:
