1. 文件上传对表单的要求：
    1. 表单中的请求提交方式必须时POST
    2. 表单中应指定所提交的请求为multipart请求，通过在<form/>标签中添加
       enctype属性，其值为multipart/form-data
    3. 表单中要有file表单元素
2. 手动解析太麻烦，一般使用第三方工具，例如apache的FileUpload(Commons
   FileUpload)，这个工具还需 Commons IO

3. FileUpload的使用
    1. 判断请求是否为multipart请求
    if(!ServletFileUpload.isMultipartContent(request)) {
        throw new RuntimeException("当前请求不支持文件上传");
    }
    2. 创建一个FileItem工厂
    DiskFileItemFactory factory = new DiskFileItemFactory();

    // 设置临时文件的边界值，大于该值，上传文件会先保存在临时文件中，否则，
    //上传文件将直接写入内存
    factory.setSizeThreshold(1024*1024*1); // 参数单位:字节。本例设置为1M

    // 设置临时文件
    String tempPath = this.getServletContext().getRealPath("/temp");
    File temp = new File(tempPath);
    factory.setRepository(temp);

    3. 创建文件上传核心组件
    ServletFileUpload upload = new ServletFileUpload(factory);

    // 设置每一个item的头部字符编码，其可以解决文件名的中文乱码问题
    upload.setHeaderEncoding("UTF-8");

    // 设置单个上传文件的最大边界值为2M
    upload.setFileSizeMax(1024 * 1024 * 2);

    // 设置一次上传所有文件的大小总和最大值为5M，使用与一次上传多个文件时
    upload.setSizeMax(1024 * 1024 * 5);

    4. 解析请求，获取到所有的item
    List<FileItem> items = upload.parsRequest(request);
    5. 遍历items
    for(FileItem item: items) {
        if(item.isFormField()) { // 若item为普通表单项
            String name = item.getFieldName(); // 获取表单项名称
            // 参数"UTF-8"解决中文乱码问题
            String value = item.getString("UTF-8"); // 获取表单项的值
        } else { // 若item为文件表单项
            String fileName = item.getName(); // 获取上传文件原始名称
            // 获取输入流，其中有上传文件的内容
            InputString is = item.getInputStream();
            // 获取文件保存在服务器的路径
            String path = this.getServletContext().getRealPath("/images");

            // 上传文件目录的管理，这里使用当前日期作为目录名
            // 获取当前系统时间
            Date date = new Date();
            // 格式化日期
            SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
            path = path + "/" + now;
            // 若该目录不存在，则创建这个目录
            File dirFile = new File(path);
            if(!dirFile.exists()) {
                dirFile.mkdir();
            }

            // 创建目标文件，将来用于保存上传文件
            File descFile = new File(path, fileName);
            // 创建文件输出流
            OutputStream os = new FileOutputStream(descFile);
            // 将输入流中的数据写入到输出流中
            int len = -1;
            byte[] buf = new byte[1024];
            while((len = is.read(buf)) != -1) {
                os.write(buf, 0, len);
            }

            // 关闭流
            os.close();
            is.close();

            // 删除临时文件
            item.delete();
        }
    }
